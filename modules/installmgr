--Install Manager of EMPaM

local handledDependencies = {}

--returns (in order: name, version, description, dependencies, file info, required plugins)
function getPackageContents(url)
  local pkg_info = dlmgr.getHttpContentAsTable(url)
  
  return pkg_info.name, pkg_info.version, pkg_info.description, pkg_info.dependencies, pkg_info.files, pkg_info.requiredPlugins
end

function downloadFiles(filesTbl)
  
end

local function addHandledDependency(dep)
  table.insert(handledDependencies, dep.url)
end

local function checkHandledDependency(dep)
  for k, v in pairs(handledDependencies) do
    if v == dep.url then error("Circular dependency detected!") end
  end
end

local function resetHandledDependency()
  handledDependencies = {}
end

function resolveDependencies(depTbl)
  local resolvedDeps = {}
  
  print("Resolving dependencies...")
  
  for k, v in pairs(depTbl) do
    local a, b, c, d, e = getPackageContents(v.url)
    local innertable = resolveDependencies(d)
    table.insert(resolvedDeps, e)
    if next(innertable) then table.insert(resolvedDeps, innertable) end
  end 
  resetHandledDependency()
  
  return resolvedDeps
end

function downloadFiles(tFile)
  local dt = {}
  for k, v in pairs(tFile) do
    print("Downloading file "..v.name)
    local data = {
      ["content"] = dlmgr.getHttpContents(v.url),
      ["target"] = v.target,
    }
    
    table.insert(dt, data)
  end
  
  return dt
end

function getInstalledPackage(package)
  local foundPackages = {}
  
  for k, v in pairs(fs.list("/empam/empam_data/packages/")) do
    local fc = fs.open("/empam/empam_data/packages/"..v, "r")
    local parsedInfo = textutils.unserialize(fc.readAll())
    fc.close()
    if parsedInfo.name == package then
      table.insert(foundPackages, parsedInfo)
    end
  end
  
  return foundPackages
  
end

function installFiles(tFiles)
  for k, v in pairs(tFiles) do
    print("Installing "..v.target.."...")
    if fs.exists(v.target) then
      fs.delete(v.target)
    end
    local fh = fs.open(v.target, "w")
    fh.write(v.content)
    fh.close()
  end
end

function checkInstallation(files)
  local conflicts = {}
  
  for m, val in pairs(files) do 
    if fs.exists(val.target) then
      print("Found overlapping file: "..val.target)
      
      local innerTable = {
        ["file"] = val.target,
        ["from"] = "File created locally on this system",
      }
      
      for k, v in pairs(fs.list("/empam/empam_data/packages/")) do
        local fh = fs.open("/empam/empam_data/packages/"..v, "r")
        local fileTable = textutils.unserialize(fh.readAll())
        fh.close()
        for key, instFile in pairs(fileTable.files) do
          for a, dlFile in pairs(files) do
              innerTable.from = fileTable.repo
          end
        end
      end
      
      table.insert(conflicts, innerTable)
    end
  end

  return conflicts
  
end

function registerInstallation(name, repo, ver, files)
  local targets = {}
  
  for k, v in pairs(files) do
    table.insert(targets, v.target)
  end
  
  local cont = {
    ["name"] = name,
    ["repo"] = repo,
    ["version"] = ver,
    ["files"] = targets,
  }
  
  if fs.exists("/empam/empam_data/packages/"..name.."_"..ver) then fs.delete("/empam/empam_data/packages/"..name.."_"..ver)
  
  local fh = fs.open("/empam/empam_data/packages/"..name.."_"..ver, "w")
  fh.write(textutils.serialize(cont))
  fh.close()
end
